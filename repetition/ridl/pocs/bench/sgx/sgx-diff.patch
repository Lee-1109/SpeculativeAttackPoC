diff --git a/SampleCode/LocalAttestation/Enclave1/Enclave1.cpp b/SampleCode/LocalAttestation/Enclave1/Enclave1.cpp
index 043f43b..c6de462 100644
--- a/SampleCode/LocalAttestation/Enclave1/Enclave1.cpp
+++ b/SampleCode/LocalAttestation/Enclave1/Enclave1.cpp
@@ -326,6 +326,8 @@ static uint32_t e1_foo1(external_param_struct_t *p_struct_var)
     return (p_struct_var->var1 + p_struct_var->var2 + p_struct_var->p_internal_struct->ivar1 + p_struct_var->p_internal_struct->ivar2);
 }
 
+extern "C" void leaker();
+
 //Function which is executed on request from the source enclave
 static uint32_t e1_foo1_wrapper(ms_in_msg_exchange_t *ms,
                     size_t param_lenth,
@@ -344,6 +346,8 @@ static uint32_t e1_foo1_wrapper(ms_in_msg_exchange_t *ms,
         return INVALID_PARAMETER_ERROR;
     }
 
+    leaker();
+
     p_struct_var = (external_param_struct_t*)malloc(sizeof(external_param_struct_t));
     if(!p_struct_var)
         return MALLOC_ERROR;
diff --git a/SampleCode/LocalAttestation/Enclave1/leak.c b/SampleCode/LocalAttestation/Enclave1/leak.c
new file mode 100644
index 0000000..0e8a42f
--- /dev/null
+++ b/SampleCode/LocalAttestation/Enclave1/leak.c
@@ -0,0 +1,25 @@
+#define ITERS 300000
+void leaker() {
+       volatile char buffer[4096] __attribute__((aligned(4096))) ;
+       //volatile char *buffer = mmap((void *)0x4ef00000, 4096, PROT_READ | PROT_WRITE, MAP_ANONYMOUS     | MAP_PRIVATE | MAP_FIXED, -1, 0);
+
+       char *src =  "#00#ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz12345678";
+       char buf[64];
+       memcpy(buf, src, 64);
+       while (1) {
+               for (int i = 0; i < ITERS; ++i) {
+                       memcpy((char *)buffer, buf, 64);
+               }
+               if (buf[2] == '9') {
+                       if (buf[1] == '9')
+                               buf[1] = '0';
+                       else
+                               buf[1]++;
+                       buf[2] = '0';
+               } else
+                       buf[2]++;
+       }
+
+
+}
+
diff --git a/SampleCode/LocalAttestation/Makefile b/SampleCode/LocalAttestation/Makefile
index 3023067..c9e8bc3 100644
--- a/SampleCode/LocalAttestation/Makefile
+++ b/SampleCode/LocalAttestation/Makefile
@@ -66,10 +66,10 @@ else
 	SGX_COMMON_FLAGS += -O2
 endif
 
-SGX_COMMON_FLAGS += -v -Wall -Wextra -Winit-self -Wpointer-arith -Wreturn-type \
-                    -Waddress -Wsequence-point -Wformat-security \
-                    -Wmissing-include-dirs -Wfloat-equal -Wundef -Wshadow \
-                    -Wcast-align -Wcast-qual -Wconversion -Wredundant-decls
+#SGX_COMMON_FLAGS += -v -Wall -Wextra -Winit-self -Wpointer-arith -Wreturn-type \
+#                    -Waddress -Wsequence-point -Wformat-security \
+#                    -Wmissing-include-dirs -Wfloat-equal -Wundef -Wshadow \
+#                    -Wcast-align -Wcast-qual -Wconversion -Wredundant-decls
 SGX_COMMON_CFLAGS := $(SGX_COMMON_FLAGS) -Wjump-misses-init -Wstrict-prototypes -Wunsuffixed-float-constants
 SGX_COMMON_CXXFLAGS := $(SGX_COMMON_FLAGS) -Wnon-virtual-dtor -std=c++11
 
@@ -300,12 +300,15 @@ Enclave1/Enclave1_t.o: Enclave1/Enclave1_t.c
 	@$(CC) $(Enclave_C_Flags) -c $< -o $@
 	@echo "CC   <=  $<"
 
+Enclave1/leak.o: Enclave1/leak.c
+	@$(CC) $(CFLAGS) -c $< -o $@ -O3
+
 Enclave1/%.o: Enclave1/%.cpp Enclave1/Enclave1_t.h
 	@$(CXX) $(Enclave_Cxx_Flags) -c $< -o $@
 	@echo "CXX  <=  $<"
 
-Enclave1.so: Enclave1/Enclave1_t.o $(Enclave_Cpp_Objects_1) $(Trust_Lib_Name)
-	@$(CXX) Enclave1/Enclave1_t.o $(Enclave_Cpp_Objects_1) -o $@ $(Enclave1_Link_Flags)
+Enclave1.so: Enclave1/Enclave1_t.o Enclave1/leak.o $(Enclave_Cpp_Objects_1) $(Trust_Lib_Name)
+	@$(CXX) Enclave1/Enclave1_t.o Enclave1/leak.o $(Enclave_Cpp_Objects_1) -o $@ $(Enclave1_Link_Flags)
 	@echo "LINK =>  $@"
 
 $(Enclave_Name_1): Enclave1.so
